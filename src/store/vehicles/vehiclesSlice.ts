import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

import { RootState } from '../index';
import { fetchVehicles } from '../../services/api';
import { IVehicle } from '../../types';

export interface VehiclesState {
  vehicles: IVehicle[] | null;
  isLoading: boolean;
}

const initialState: VehiclesState = {
  vehicles: null,
  isLoading: false,
};

export const fetchVehiclesAction = createAsyncThunk(
  'vehicles/fetchVehicles',
  async () => {
    const response = await fetchVehicles();
    return response;
  }
);

export const vehiclesSlice = createSlice({
  name: 'vehicles',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    checkoutVehicle: (state, action) => {
      if (state.vehicles) {
        const checkoutedIndex = state.vehicles?.findIndex(vehicle => vehicle.MakeId === action.payload.MakeId)
        state.vehicles[checkoutedIndex] = action.payload
      }
    },
    checkbackVehicle: (state, action) => {
      if (state.vehicles) {
        const checkoutedIndex = state.vehicles?.findIndex(vehicle => vehicle.MakeId === action.payload.MakeId)
        // Clean checkback data for next checkout. If we want to get the checkback history, we can use checkback details from action.payload
        state.vehicles[checkoutedIndex] = {...action.payload, name: '', checkoutDate: '', checkoutType: undefined, checkbackRule: ''}
      }
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchVehiclesAction.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(fetchVehiclesAction.fulfilled, (state, action) => {
        state.isLoading = false;
        const { Results } = action.payload;
        state.vehicles = Results;
      });
  },
});

// Actions
export const {
  checkoutVehicle,
  checkbackVehicle
} = vehiclesSlice.actions

export const selectVehicles = (state: RootState) => state.vehicles.vehicles;
export const selectIsVehiclesLoading = (state: RootState) =>
  state.vehicles.isLoading;

export default vehiclesSlice.reducer;
